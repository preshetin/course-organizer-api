service: course-organizer-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-course-organizer
  queueName: ${self:custom.stage}-course-organizer

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    upcomingCourseId: ${env:UPCOMING_COURSE_ID}
    queueUrl: ${env:QUEUE_URL}
    sendgridApiKey: ${env:SENDGRID_API_KEY}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ CourseOrganizerTable, Arn ]
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
        - sqs:ListQueues
      Resource:
        - "Fn::GetAtt": [ CourseOrganizerQueue, Arn ]

functions:
  # Courses CRUD
  coursesCreate:
    handler: functions/courses/create.main
    events:
      - http:
          path: courses
          method: post
          cors: true
          authorizer: aws_iam
  coursesGet:
    handler: functions/courses/get.main
    events:
      - http:
          path: courses/{courseId}
          method: get
          cors: true
          authorizer: aws_iam
  coursesList:
    handler: functions/courses/list.main
    events:
      - http:
          path: courses
          method: get
          cors: true
          authorizer: aws_iam
  coursesUpdate:
    handler: functions/courses/update.main
    events:
      - http: 
          path: courses/{courseId}
          method: put
          cors: true
          authorizer: aws_iam
  coursesDelete:
    handler: functions/courses/delete.main
    events:
      - http:
          path: courses/{courseId}
          method: delete
          cors: true
          authorizer: aws_iam

  # Applications CRUD
  applicationsCreate:
    handler: functions/applications/create.main
    events:
      - http:
          path: courses/{courseId}/applications
          method: post
          cors: true
          authorizer: aws_iam
  applyForUpcomingCourse:
    handler: functions/applications/applyForUpcomingCourse.main
    events:
      - http:
          path: applyForUpcomingCourse
          method: post
  applicationsGet:
    handler: functions/applications/get.main
    events:
      - http:
          path: courses/{courseId}/applications/{applicationId}
          method: get
          cors: true
          authorizer: aws_iam
  applicationsList:
    handler: functions/applications/list.main
    events:
      - http:
          path: courses/{courseId}/applications
          method: get
          cors: true
          authorizer: aws_iam
  applicationsUpdate:
    handler: functions/applications/update.main
    events:
      - http: 
          path: courses/{courseId}/applications/{applicationId}
          method: put
          cors: true
          authorizer: aws_iam
  applicationsDelete:
    handler: functions/applications/delete.main
    events:
      - http:
          path: courses/{courseId}/applications/{applicationId}
          method: delete
          cors: true
          authorizer: aws_iam
  processStatusChange:
    handler: functions/applications/processStatusChange.main
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CourseOrganizerQueue
              - Arn 
          batchSize: 1

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Queue
  - ${file(resources/sqs-queue.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
